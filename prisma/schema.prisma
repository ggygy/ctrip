generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model navmenu {
  id         Int            @id @default(autoincrement()) @db.UnsignedInt
  pid        Int            @default(0) @db.UnsignedInt
  type       navmenu_type   @default(menu)
  title      String         @default("") @db.VarChar(50)
  path       String         @default("") @db.VarChar(100)
  icon       String         @default("") @db.VarChar(50)
  weigh      Int            @default(0)
  status     navmenu_status @default(enable)
  updatetime DateTime?      @db.DateTime(0)
  createtime DateTime?      @db.DateTime(0)

  @@index([pid], map: "pid")
  @@index([weigh], map: "weigh")
}

model marketcity {
  cityName   String @id @db.VarChar(50)
  cityImgUrl String @db.VarChar(255)
  cityTemLb  Int    @db.SmallInt
  cityTemUb  Int    @db.SmallInt

  @@index([cityName, cityImgUrl, cityTemLb, cityTemUb], map: "cityName")
}

model marketdata {
  cityName           String @db.VarChar(50)
  hotelImgUrl        String @db.VarChar(255)
  hotelSkipUrl       String @db.VarChar(255)
  hotelName          String @id @db.VarChar(255)
  hotelStartingPrice Int

  @@index([cityName], map: "cityName")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  apiKeyId String?
  image    String?
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum navmenu_type {
  route
  menu_dir
  menu
}

enum navmenu_status {
  enable  @map("1")
  disable @map("0")
}
